#summary Working with data models and instances.

= Introduction =

This is a tutorial-style guide to the development of [http://tools.ietf.org/html/rfc6020 YANG] data models and corresponding data instances¬†‚Äì configurations, state data, RPC requests or replies, and notifications.

= YANG Data Model =

A data model is fully determined by the following information:
 * one or more YANG modules
 * optional _features_ that are supported by the device

Features are defined in YANG modules and allow for making selected parts of the data model schema conditional (see [http://tools.ietf.org/html/rfc6020#section-5.6.2 Section¬†5.6.2] in RFC¬†6020 for details).

YANG modules comprising the data model are entered on the pyang command line, and features may be specified using the `--features` option. This option can be used repeatedly ‚Äì each occurrence defines active (supported) features for one YANG module.

For example, the following command line uses two YANG modules, `foo` and `bar`, and the only supported feature is `miracle` (defined in `foo`). 

{{{
$ pyang -f tree --features foo:miracle --features bar: foo.yang bar.yang
}}}

If no `--features` option is present for a module, then all features defined in that module are considered active.

For data models that consist of a larger number of YANG modules and/or features, it may be inconvenient to provide all data model information on the command line. Therefore, it is also possible to specify the data model in a configuration file. The contents of the configuration file are the _hello_ message that is sent by the NETCONF server at the start of every session¬†‚Äì see RFC¬†6241, [http://tools.ietf.org/html/rfc6241#section-8.1 Section 8.1], and RFC¬†6020, [http://tools.ietf.org/html/rfc6020#section-5.6.4 Section 5.6.4].

This command line achieves the same effect as the previous one:

{{{
$ pyang -f tree --hello hello.xml
}}}

where the contents of `hello.xml` is as follows:

{{{
<hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <capabilities>
    <capability>
      http://example.com/foo?module=foo&amp;features=miracle
    </capability>
    <capability>
      http://example.com/bar?module=bar
    </capability>
  </capabilities>
</hello>
}}}

See pyang manual page for more information.

= Editing YANG Modules =

YANG modules can be edited in any text editor capable of saving plain text (without formatting information). Add-ons for popular editors are available with varying degrees of support for YANG syntax:
 * [http://www.yang-central.org/twiki/pub/Main/YangTools/yang.vim yang.vim]¬†‚Äì syntax file for Vim,
 * [http://www.yang-central.org/twiki/pub/Main/YangTools/yang-mode.el yang-mode.el] ‚Äì Emacs mode for YANG, based on CC mode.

Speaking about Emacs, the amazing [http://www.thaiopensource.com/nxml-mode/ nXML mode] makes a case for editing YANG modules in the alternative XML-based _YIN_ syntax (see RFC¬†6020, [http://tools.ietf.org/html/rfc6020#section-11 Section¬†11]). This approach is described [https://gitlab.labs.nic.cz/labs/yang-tools/wikis/editing_yang here].

= Example Data Model =

We will demonstrate pyang functions on a data model of the Turing Machine, [https://code.google.com/p/pyang/source/browse/trunk/doc/tutorial/examples/turing-machine.yang turing-machine.yang]. It is relatively simple but comprehensive in that it covers all document/message types supported in YANG¬†‚Äì configuration and state data, RPCs and notifications.

The reader should imagine there is a Turing Machine device that runs a NETCONF server, so that we can use a NETCONF client for configuring the machine and communicating with it.

To see an overview of the data model schemas, we can use the `tree` plugin of pyang:

{{{
$ pyang -f tree turing-machine.yang
module: turing-machine
   +--rw turing-machine
      +--ro state                  uint16
      +--ro head-position          int64
      +--ro tape
      |  +--ro cell* [coord]
      |     +--ro coord     int64
      |     +--ro symbol?   tape-symbol
      +--rw transition-function
         +--rw delta* [label]
            +--rw label     string
            +--rw input
            |  +--rw state     uint16
            |  +--rw symbol    tape-symbol
            +--rw output
               +--rw state?       uint16
               +--rw symbol?      tape-symbol
               +--rw head-move?   enumeration
rpcs:
   +---x initialize    
   |  +--ro input     
   |     +--ro tape-content?   string
   +---x run           
notifications:
   +---n halted    
      +--ro state    uint16
}}}

Use `pyang --tree-help` to see the explanation of symbols used in the tree representation.

The Turing Machine is represented using _operational state_ nodes (denoted with `ro`):
 * _state_ ‚Äì current state of the control unit,
 * _head-position_ ‚Äì current position of the read/write head,
 * _tape_ ‚Äì sparse list of cells with their coordinates and contained symbols (blank cells do not appear in the list).

The _configuration_ is a specification of the transition function ùõø, i.e. a program for the Turing Machine. Each transition rule has two input parameters¬†‚Äì the current state of the control unit and the symbol read from the current tape cell¬†‚Äì and three output values¬†‚Äì the new state, new symbol written to the tape cell, and new position of the head (one cell to the left or to the right from the current cell).

The data model also defines two RPC methods:
 * _initialize_ ‚Äì puts the control unit into the initial state, the read/write head to its ‚Äúhome‚Äù position, and initializes the contents of the tape.
 * _run_ ‚Äì starts Turing Machine's computation.

Finally, there is an event notification, _halted_, which is triggered when the Turing Machine halts. This happens whenever no transition rule is defined for the current state and tape symbol. The notification reports the clock time when the machine halted and the current state.

Further information about the data model can be found in description texts of the [https://code.google.com/p/pyang/source/browse/trunk/doc/tutorial/examples/turing-machine.yang module].

= What's Next? =

The following tutorial pages describe how a data model can used, together with pyang, for accomplishing various tasks. The pages are independent and can be read in any order:
 * InstanceValidation ‚Äì validation of XML instances,
 * Augment ‚Äì augmenting the data model,
 * XmlJson ‚Äì schema-aware conversion of XML data to JSON and back.

<g:plusone size="medium"></g:plusone>

<wiki:comment>
Local Variables:
mode: fundamental
mode: visual-line
End:
</wiki:comment>